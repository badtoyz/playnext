#!/bin/bash

SCRIPT_NAME=$(basename $0)
if [[ -t 1 ]]; then
  DEFAULT_COMMAND=mplayer
else
  DEFAULT_COMMAND=echo
fi

function print_usage() {
  #     12345678901234567890123456789012345678901234567890123456789012345678901234567890
  echo "Usage:  $SCRIPT_NAME [OPTION]... [DIR]"
  echo
  echo "Plays the next episode in the given directory. If no directory is given, uses"
  echo "the current directory."
  echo
  echo "If not connected to a terminal, prints the filename instead of playing it."
  echo "This allows you to do things like:"
  echo
  echo "  cp "\`playnext\`" /mnt/ipod"
  echo
  echo "Options:"
  echo "  -c, --command=command         command to use to play file echo (default: "
  echo "                                  mplayer if connected to a tty, echo otherwise)"
  echo "  -e, --episode=filename        output given episode and remember this"
  echo "  -f, --progress-file=filename  configuration file name (default: ~/.playnextrc)"
  echo "  -h, --help                    show this help"
  echo "  -l, --list                    print the list of last episodes played"
  echo "  -n, --next                    skip episode (can be repeated)"
  echo "  -p, --previous                play previous episode (can be repeated)"
  echo "  -v, --verbose                 verbose mode; useful for debugging"
}

function print_verbose() {
  if (( verbose )); then
    echo "$SCRIPT_NAME: $@" >&2
  fi
}

function print_error() {
  echo "$SCRIPT_NAME: $@" >&2
}

function exit_error() {
  print_error "$@"
  exit 1
}

function read_progress_file() {
  print_verbose "Reading progress file ${progress_file}..."
  IFS=$'\n' progress=( $(< "$progress_file") )
}

function find_previous_episode() {
  for episode in "${progress[@]}"; do
    if [[ $episode == $media_dir* ]]; then
      if [[ -z $previous_episode ]]; then
        previous_episode="$episode"
        print_verbose "Previous episode: $previous_episode"
      else
        exit_error "Multiple previous episodes remembered for $media_dir: at least $previous_episode and $REPLY. Use -e to specify episode"
      fi
    fi
  done
}

function write_progress_file() {
  local current_episode="$1"
  print_verbose "Writing new progress file to $progress_file..."
  (
    for episode in "${progress[@]}"; do
      if [[ $episode != $media_dir* ]]; then
        echo "$episode"
      fi
    done 
    if [[ ! -z $current_episode ]]; then
      echo "$current_episode"
    fi
  ) > "$progress_file"
}

function find_next_episode() {
  IFS=$'\n' episodes=( $(find "$media_dir" -type f ! -path "*/.*" | sort -f -d) )
  num_episodes=${#episodes[@]}
  print_verbose "Found $num_episodes episodes in $media_dir"

  if (( $num_episodes == 0 )); then
    exit_error "No episodes found in $media_dir"
  fi

  local previous_index
  if [[ -z $previous_episode ]]; then
    print_verbose "No previous episode found; starting from first"
    previous_index=-1
  else
    for (( i = 0; i < ${#episodes[@]}; i++ )); do
      if [[ ${episodes[$i]} == $previous_episode ]]; then
        previous_index=$i
        break
        return
      fi
    done
  fi

  if [[ -z previous_index ]]; then
    exit_error "Previous episode ${previous_episode#$media_dir/} not found; use -e to specify episode"
  fi

  local current_index=$(( previous_index + offset ))
  if (( current_index < 0 )); then
    exit_error "No more episodes before ${episodes[0]#$media_dir/}"
  fi
  if (( current_index >= $num_episodes )); then
    exit_error "No more episodes after ${episodes[$(( num_episodes - 1 ))]#$media_dir/}"
  fi

  current_episode="${episodes[$current_index]}"
}

function usage_error() {
  print_usage
  print_error "$1"
  exit 1
}

function require_argument() {
  [[ -z ${2+x} ]] && print_usage && print_error "Option $1 requires an argument" && exit 1
}

while (( $# > 0 )); do
  case $1 in
    -c | --command)
      require_argument "$@"
      command="$2"
      shift
      ;;
    -d | --directory)
      require_argument "$@"
      media_dir="$2"
      shift
      ;;
    -e | --episode)
      require_argument "$@"
      current_episode="$2"
      shift
      ;;
    -f | --progress-file)
      require_argument "$@"
      progress_file="$2"
      shift
      ;;
    -h | --help)
      print_usage
      exit 0
      ;;
    -l | --list)
      list=1
      ;;
    -n | --next)
      offset=$(( offset + 1 ))
      ;;
    -p | --previous)
      offset=$(( offset - 1 ))
      ;;
    -v | --verbose)
      verbose=1
      ;;
    -*)
      usage_error "Invalid option: $1"
      ;;
    *)
      [[ ! -z $media_dir ]] && usage_error "Multiple directories given"
      media_dir="$1"
      ;;
  esac
  shift
done

progress_file=${progress_file-$HOME/.playnextrc}
media_dir=${media_dir-.}
command=${command-$DEFAULT_COMMAND}
offset=$(( offset + 1 ))

touch "$progress_file"
read_progress_file

if (( list )); then
  for episode in "${progress[@]}"; do
    echo "$episode"
  done
  exit 0
fi

media_dir="$(readlink -f "$media_dir")"
print_verbose "Using directory $media_dir"

current_episode="$(readlink -f "$current_episode")"
if [[ ! -z $current_episode ]]; then
  if [[ $current_episode != $media_dir* ]]; then
    exit_error "The given file $current_episode does not reside in $media_dir"
  fi
  print_verbose "Using current episode $current_episode"
else
  find_previous_episode
  if (( previous )); then
    current_episode="$previous_episode"
  else
    find_next_episode
  fi
fi

if $command "${current_episode}"; then
  write_progress_file "$current_episode"
fi
